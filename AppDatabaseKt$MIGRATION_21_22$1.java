package quickresto.webterminal;

import androidx.room.migration.Migration;
import androidx.sqlite.db.SupportSQLiteDatabase;
import java.time.OffsetDateTime;
import kotlin.Metadata;
import kotlin.jvm.internal.Intrinsics;

@Metadata(d1 = {"\u0000\u0017\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000*\u0001\u0000\b\n\u0018\u00002\u00020\u0001J\u0010\u0010\u0002\u001a\u00020\u00032\u0006\u0010\u0004\u001a\u00020\u0005H\u0016Â¨\u0006\u0006"}, d2 = {"quickresto/webterminal/AppDatabaseKt$MIGRATION_21_22$1", "Landroidx/room/migration/Migration;", "migrate", "", "database", "Landroidx/sqlite/db/SupportSQLiteDatabase;", "quickresto.webterminal-9.5.7(254)_release"}, k = 1, mv = {1, 8, 0}, xi = 48)
/* compiled from: AppDatabase.kt */
public final class AppDatabaseKt$MIGRATION_21_22$1 extends Migration {
    AppDatabaseKt$MIGRATION_21_22$1() {
        super(21, 22);
    }

    public void migrate(SupportSQLiteDatabase supportSQLiteDatabase) {
        Intrinsics.checkNotNullParameter(supportSQLiteDatabase, "database");
        supportSQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS `sysExtras` \n    (\n        `tenantId` TEXT NOT NULL, \n        `layerStopTime` TEXT, \n        `timeZone` TEXT NOT NULL,\n         PRIMARY KEY(`tenantId`))");
        supportSQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS `onlineInterface` \n(\n`id` INTEGER NOT NULL, \n`encodedCredentials` TEXT NOT NULL, \n`serverUri` TEXT NOT NULL, \nPRIMARY KEY(`id`)\n)");
        supportSQLiteDatabase.execSQL("ALTER TABLE tableOrders RENAME TO tableOrders_");
        supportSQLiteDatabase.execSQL("CREATE TABLE tableOrders (`terminalId` TEXT NOT NULL, `kkmId` TEXT, `kkmManufacturerDeviceId` TEXT, `creatorUser` TEXT NOT NULL, `createTime` TEXT NOT NULL, `updateTime` TEXT NOT NULL, `guestCount` INTEGER NOT NULL, `tableId` INTEGER, `status` TEXT NOT NULL, `waiterName` TEXT, `tableName` TEXT, `floorName` TEXT, `comment` TEXT, `shiftId` TEXT, `shiftDocumentId` TEXT, `organizationId` INTEGER NOT NULL, `organizationName` TEXT, `organizationInn` TEXT, `number` TEXT NOT NULL, `basicPriceModifiers` TEXT NOT NULL, `createLocalDate` TEXT NOT NULL, `id` TEXT NOT NULL, `onlineOfferId` TEXT, `delivery` TEXT, `localTimezoneOffsetMin` INTEGER NOT NULL, PRIMARY KEY(`id`))");
        supportSQLiteDatabase.execSQL("INSERT INTO tableOrders(`terminalId`, `kkmId`, `kkmManufacturerDeviceId`, `creatorUser`, `createTime`, `updateTime`, `guestCount`, `tableId`, `status`, `waiterName`, `tableName`, `floorName`, `comment`, `shiftId`, `shiftDocumentId`, `organizationId`, `organizationName`, `organizationInn`, `number`, `basicPriceModifiers`, `createLocalDate`, `id`, `onlineOfferId`, `delivery`, `localTimezoneOffsetMin`) SELECT `terminalId`, `kkmId`, `kkmManufacturerDeviceId`, `creatorUser`, `createTime`, `updateTime`, `guestCount`, `tableId`, `status`, `waiterName`, `tableName`, `floorName`, `comment`, `shiftId`, `shiftDocumentId`, `organizationId`, `organizationName`, `organizationInn`, `number`, `basicPriceModifiers`, `createLocalDate`, `id`, `onlineOfferId`, NULL, " + (OffsetDateTime.now().getOffset().getTotalSeconds() / 60) + " from tableOrders_");
        supportSQLiteDatabase.execSQL("DROP TABLE tableOrders_");
        supportSQLiteDatabase.execSQL("DROP TABLE IF EXISTS ordersV2__");
        supportSQLiteDatabase.execSQL("ALTER TABLE ordersV2 RENAME TO ordersV2__");
        supportSQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS `ordersV2` (`id` TEXT NOT NULL, `syncTime` TEXT, paymentTransactions TEXT NOT NULL, comments TEXT NOT NULL, replicationStatus TEXT, atolReceiptResponse TEXT, customerSnapshots TEXT NOT NULL, guestIdxes TEXT NOT NULL, returnedComment TEXT, totalSum REAL NOT NULL, tableOrderDocumentId TEXT NOT NULL, priceModifiers TEXT NOT NULL, updatable INTEGER NOT NULL, receipt TEXT, atolReturnResponse TEXT, returned INTEGER NOT NULL, items TEXT NOT NULL, customerSnapshot TEXT, customerPriceModifiers TEXT NOT NULL, removed INTEGER NOT NULL, deliveryItem TEXT, orderDueDateDelta INTEGER NOT NULL DEFAULT 0, courierCheckPrinted INTEGER NOT NULL DEFAULT 0, PRIMARY KEY(`id`))");
        supportSQLiteDatabase.execSQL("INSERT INTO ordersV2(`id`, `syncTime`, `paymentTransactions`, `comments`, `replicationStatus`, `atolReceiptResponse`, `customerSnapshots`, `guestIdxes`, `returnedComment`, `totalSum`,  `tableOrderDocumentId`, `priceModifiers`, `updatable`, `receipt`, `atolReturnResponse`, `returned`, `items`, `customerSnapshot`, `customerPriceModifiers`, `removed`, `deliveryItem`, `orderDueDateDelta`, `courierCheckPrinted`) SELECT `id`, `syncTime`, `paymentTransactions`, `comments`, `replicationStatus`, `atolReceiptResponse`, `customerSnapshots`, `guestIdxes`, `returnedComment`, `totalSum`,  `tableOrderDocumentId`, `priceModifiers`, `updatable`, `receipt`, `atolReturnResponse`, `returned`, `items`, `customerSnapshot`, `customerPriceModifiers`, `removed`, NULL, 0, 0 FROM ordersV2__");
        supportSQLiteDatabase.execSQL("DROP TABLE ordersV2__");
        supportSQLiteDatabase.execSQL("ALTER TABLE dish RENAME TO dish_");
        supportSQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS `dish` (`id` INTEGER NOT NULL, `terminalId` TEXT NOT NULL, `name` TEXT NOT NULL, `parentId` INTEGER, `price` REAL NOT NULL, `imageId` INTEGER, `imageUrl` TEXT, `prevId` INTEGER, `orderIndex` INTEGER NOT NULL, `tagId` INTEGER, `organizationId` INTEGER NOT NULL DEFAULT 0, `cookingPlaceId` INTEGER NOT NULL DEFAULT 0, `salePlaceId` INTEGER NOT NULL DEFAULT 0, `sellingType` TEXT, `deleted` INTEGER NOT NULL, `paths` TEXT NOT NULL, `tagPaths` TEXT NOT NULL, `taxValue` REAL, `minPrice` REAL, `excludeDiscount` INTEGER NOT NULL, `excludeMarkup` INTEGER NOT NULL, `cookingTime` INTEGER, `barCode` TEXT, `categoryName` TEXT, PRIMARY KEY(`id`))");
        supportSQLiteDatabase.execSQL("INSERT INTO dish(`id`, `terminalId`, `name`, `parentId`, `price`, `imageId`, `imageUrl`, `prevId`, `orderIndex`, `tagId`, `organizationId`, `cookingPlaceId`, `salePlaceId`, `sellingType`, `deleted`, `paths`, `tagPaths`, `taxValue`, `minPrice`, `excludeDiscount`, `excludeMarkup`, `cookingTime`, `barCode`, `categoryName`) SELECT `id`, `terminalId`, `name`, `parentId`, `price`, `imageId`, `imageUrl`, `prevId`, `orderIndex`, `tagId`, IFNULL(`organizationId`, 0), IFNULL(`cookingPlaceId`, 0), IFNULL(`salePlaceId`, 0), `sellingType`, `deleted`, `paths`, `tagPaths`, `taxValue`, `minPrice`, `excludeDiscount`, `excludeMarkup`, `cookingTime`, `barCode`, NULL FROM dish_");
        supportSQLiteDatabase.execSQL("DROP TABLE dish_");
        supportSQLiteDatabase.execSQL("ALTER TABLE modifier RENAME TO modifier_");
        supportSQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS `modifier` (`id` INTEGER NOT NULL, `terminalId` TEXT NOT NULL, `name` TEXT NOT NULL, `parentId` INTEGER, `price` REAL NOT NULL, `prevId` INTEGER, `orderIndex` INTEGER NOT NULL, `tagId` INTEGER, `withDish` INTEGER NOT NULL, `minPrice` REAL, `excludeDiscount` INTEGER NOT NULL, `excludeMarkup` INTEGER NOT NULL, PRIMARY KEY(`id`))");
        supportSQLiteDatabase.execSQL("INSERT INTO modifier(`id`, `terminalId`, `name`, `parentId`, `price`, `prevId`, `orderIndex`, `tagId`, `withDish`, `minPrice`, `excludeDiscount`, `excludeMarkup`) SELECT `id`, `terminalId`, `name`, `parentId`, `price`, `prevId`, `orderIndex`, `tagId`, `withDish`, `minPrice`, `excludeDiscount`, `excludeMarkup` FROM modifier_");
        supportSQLiteDatabase.execSQL("DROP TABLE modifier_");
        supportSQLiteDatabase.execSQL("DROP TABLE IF EXISTS modifierLink_");
        supportSQLiteDatabase.execSQL("ALTER TABLE modifierLink RENAME TO modifierLink_");
        supportSQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS `modifierLink` (`id` INTEGER NOT NULL, `modifierId` INTEGER NOT NULL, `dishId` INTEGER NOT NULL, `default` INTEGER NOT NULL, `min` INTEGER NOT NULL, `max` INTEGER NOT NULL, `group` INTEGER NOT NULL, `price` REAL NOT NULL, `cookingPlaceId` INTEGER NOT NULL DEFAULT 0, `organizationId` INTEGER NOT NULL DEFAULT 0, PRIMARY KEY(`id`))");
        supportSQLiteDatabase.execSQL("INSERT INTO modifierLink(`id`, `modifierId`, `dishId`, `default`, `min`, `max`, `group`, `price`, `cookingPlaceId`, `organizationId`) SELECT `id`, `modifierId`, `dishId`, `default`, `min`, `max`, `group`, `price`, IFNULL(`cookingPlaceId`, 0), 0 FROM modifierLink_ WHERE `price` IS NOT NULL");
        supportSQLiteDatabase.execSQL("DROP TABLE modifierLink_");
        supportSQLiteDatabase.execSQL("ALTER TABLE specialSet RENAME TO specialSet_");
        supportSQLiteDatabase.execSQL("CREATE TABLE specialSet (`triggerThreshold` REAL NOT NULL, `conditionType` TEXT NOT NULL, `specialOfferAccountTypeId` INTEGER, `id` INTEGER, `name` TEXT, `start` TEXT, `end` TEXT, `quantity` REAL, `dishesFilters` TEXT NOT NULL, `weeklySchedule` TEXT NOT NULL, `discountValue` REAL, `salePlaces` TEXT NOT NULL, `deleted` INTEGER NOT NULL, `crmGroups` TEXT NOT NULL, PRIMARY KEY(`id`))");
        supportSQLiteDatabase.execSQL("INSERT INTO specialSet(`triggerThreshold`, `conditionType`, `specialOfferAccountTypeId`, `id`, `name`, `start`, `end`, `quantity`, `dishesFilters`, `weeklySchedule`, `discountValue`, `salePlaces`, `deleted`, `crmGroups`) SELECT `triggerThreshold`, `conditionType`, `specialOfferAccountTypeId`, `id`, `name`, `start`, `end`, `quantity`, `dishesFilters`, `weeklySchedule`, `discountValue`, `salePlaces`, `deleted`, `crmGroups` from specialSet_");
        supportSQLiteDatabase.execSQL("DROP TABLE specialSet_");
        supportSQLiteDatabase.execSQL("ALTER TABLE applicationSettings ADD COLUMN courierDeviceId TEXT");
        supportSQLiteDatabase.execSQL("ALTER TABLE applicationSettings ADD COLUMN courierPrinterSetting TEXT NOT NULL DEFAULT 'NOT_USE'");
        supportSQLiteDatabase.execSQL("DROP TABLE IF EXISTS onlineOffers_");
        supportSQLiteDatabase.execSQL("ALTER TABLE onlineOffers RENAME TO onlineOffers_");
        supportSQLiteDatabase.execSQL("CREATE TABLE onlineOffers (id INTEGER NOT NULL, createDate TEXT NOT NULL, refId TEXT NOT NULL, offerStatus TEXT NOT NULL, paystatus TEXT NOT NULL, cancellationaccepted INTEGER NOT NULL, version INTEGER NOT NULL, cancellationComment TEXT, data TEXT NOT NULL, replicationStatus TEXT, wlPreOrderStatus TEXT NOT NULL, deliveryAmount REAL, ownerRefId TEXT, PRIMARY KEY(id))");
        supportSQLiteDatabase.execSQL("INSERT INTO onlineOffers(`id`, `createDate`, `refId`, `offerStatus`, `paystatus`, `cancellationaccepted`, `version`, `cancellationComment`, `data`, `replicationStatus`, `wlPreOrderStatus`, `deliveryAmount`, `ownerRefId`) SELECT `id`, `createDate`, `refId`, `offerStatus`, `paystatus`, `cancellationaccepted`, `version`, `cancellationComment`, `data`, `replicationStatus`, IFNULL(`wlPreOrderStatus`, 'DONE' ), `deliveryAmount`, NULL FROM onlineOffers_");
        supportSQLiteDatabase.execSQL("DROP TABLE onlineOffers_");
        supportSQLiteDatabase.execSQL("ALTER TABLE shift RENAME TO shift___");
        supportSQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS `shift` (`id` TEXT NOT NULL, `replicationStatus` TEXT NOT NULL, `syncTime` TEXT, `shiftNumber` INTEGER, `shiftId` TEXT, `openUserId` INTEGER NOT NULL, `kkmId` TEXT NOT NULL, `deviceId` TEXT, `deviceType` TEXT NOT NULL, `actionType` TEXT NOT NULL, `closeShiftRequest` TEXT, `createTime` TEXT NOT NULL, `openedTime` TEXT, `salePlaceId` INTEGER NOT NULL, PRIMARY KEY(`id`))");
        supportSQLiteDatabase.execSQL("INSERT INTO shift(`id`, `replicationStatus`, `syncTime`, `shiftNumber`, `shiftId`, `openUserId`, `kkmId`, `deviceId`, `deviceType`, `actionType`, `closeShiftRequest`, `createTime`, `openedTime`, `salePlaceId`) SELECT `id`, `replicationStatus`, `syncTime`, `shiftNumber`, `shiftId`, `openUserId`, `kkmId`, `deviceId`, `deviceType`, `actionType`, `closeShiftRequest`, `createTime`, `createTime`, `salePlaceId` FROM shift___");
        supportSQLiteDatabase.execSQL("DROP TABLE shift___");
    }
}
